* 第7章 改造世界的工具

懒蜗牛同学熟悉了命令行的操作，了解了各种命令之后，越来越能体会到我们Ubuntu系统的自由和开放。但他没有就此结束探索，他还要更深入地学习，学习编程，学习如何改造这个Linux世界。

** 7.1　C/C++语言


开发环境的搭建

编程语言有很多种，懒蜗牛也不知道哪个适合自己。所幸他上学的时候学过Turbo
C，而且听说C语言在Linux里用得很广泛，那就从C语言开始吧。

*** 7.1.1　安装开发套件

C语言是当年创造UNIX系统的主要参与者之一------Dennis M.
Ritchie设计并实现的。（就是图7.1里所示的这位）当年这位牛人在写UNIX系统的时候，觉得没啥顺手的编程语言，于是就基于B语言进行改造，设计出了C语言。

[[./Images/image00570.jpeg]]

图7.1　Dennis M. Ritchie

牛人设计出的东西总是很经典的，C语言就是一个经典中的经典，经典到至今仍然被广泛应用于各种编程的场合。C语言是一种编译型语言，所以要使用C语言开发程序，就需要安装编译器。

*提示：*B语言是由BCPL语言发展而来的，设计者是美国贝尔实验室的Ken
Thompson。将它取名为B语言的意思是将BCPL语言进行压缩，提炼出它的精华。
# 这俩缔造Unix
【编译型语言】

有人问，什么叫编译型语言呢？

编程语言大致分成两种，编译型和解释型。编译型语言，就是像C语言这样的，写完了需要用编译器编译的语言。

C语言的程序源码，对我们系统来说就是一个普通的写满字符的文本文件而已。就比如你看书懒得自己翻页（这得多么懒啊），于是要设计一个自动翻页的机器，那么肯定要先有机器的大致的设计图纸。C语言的源代码就相当于是设计图纸，而最终要得到的那个可以运行起来的程序就相当于最终的翻页机。要想让图纸变成机器，需要一个制造的过程，这个过程就相当于编译过程。造机器的过程中肯定需要各种工具，什么扳手、钳子、螺丝刀之类的。软件的编译也需要工具，就是编译工具。

通过编译工具的编译，原本一个或者几个源码文件（多数情况下是很多源码文件），就变成了活生生的、欢蹦乱跳的、能够像狐狸妹妹（以下“狐狸妹妹”或“狐狸”特指Firefox）一样跑进内存运行的程序。

除了编译型语言外，还有一种解释型语言，咱们以后再解说它。这里先说C语言的编译工具。

【GCC的来历】

我们Linux系统中最常用的C语言编译器就是GCC了，图7.2所示是它的Logo。

[[./Images/image00571.jpeg]]

图7.2　GCC的Logo

GCC这个项目是GNU计划的发起者------Richard
Stallman于1984年开始实施的。到1987年，首次发行了最初的GCC版本。他最初取名GCC是想表示GNU C Compiler，也就是GNU系统中的C语言编译器。GCC起初是在早期的Sun和DEC
VAX系统上运行的，由于它是开源的编译器（Richard
Stallman创造的东西，怎么可能不开源，除非太阳从西边出来），因此热心的爱好者们可以随意修改并且完善它。这其中最主要的工作，就是提供对各种处理器架构Arm、MIPS、x86等的支持。很快，GCC就能够支持大多数流行的（甚至罕见的）处理器架构了。表7.1列出了目前GCC支持的CPU架构。


由此可见，GCC支持的处理器还是非常广泛的。不仅如此，随着开源贡献者的不断完善，GCC的功能还得到充分的扩充，不仅可以编译C语言，什么Ada、Fortran、C++、Object-C，它都可以支持。它不再仅仅是一个C Compiler，于是它的首字母缩写的意思就变成了GNU Compiler Collection，也就是GNU系统编译器套装。

*提示：*Object-C是扩充C的面向对象编程语言。它主要使用于Mac
OS X和GNUstep这两个使用OpenStep标准的系统。

除了GCC外，Intel公司还开发了一个专门针对他们公司的处理器进行优化的编译器------ICC，大约就是Intel C Compiler的意思吧。如果你用的是Intel公司的CPU，那么这个编译器编译出来的东西，理论上效率会高一些。不过这个编译器目前还不大靠谱，用来试验还可以。

【需要安装的软件包】

好，咱还回来说GCC。说了这么多，这个GCC编译器怎么安装呢？是不是叫apt来装就好了呢？告诉您，apt都不用，装系统的时候就装上了。那么既然已经有了编译器，懒蜗牛同学是不是可以马上开始用GCC编译C语言的程序了呢？也不是，只有GCC是不够的，还需要一些必要的头文件和库文件。

前面说过，GCC就相当于一个用来加工代码的工具，就像木匠造凳子需要的凿子、斧子、锯子这些工具一样。但光有工具不行，还得有材料。要创造东西总是要把某种东西经过加工才变成成品的，总不可能凭空创造出东西吧。你看木匠要造凳子得需要木头、钉子或者胶水这些材料。根据爱因斯坦的物质守恒学说......哦，有点扯远了，总之，要创造程序，需要工具和材料。

用户要创造一个程序，他需要的工具，就是GCC。而需要的材料，就是各种头文件、库文件这样的文件。创造程序之前，需要准备好这些东西才可以开始。我们的懒蜗牛同学似乎已经进行了充分的学习，对这些理解得比较透彻，所以他就直接叫apt来帮忙准备好这些工具和材料。

为了方便用户安装开发环境，apt已经把创造程序需要的工具都打好了包，包名就叫做build-essential。所以懒蜗牛运行了：
: sudo apt-get install build-essential

就去把这些东西从网络上拖回来并且安装好了。作为仅仅是初学C语言的懒蜗牛同学来说，装好这个包就够了。

*提示：*如果编写较为复杂的程序，则需要根据程序所涉及的功能安装相应的库。例如，编写需要调用OpenGL绘图的程序，则需安装OpenGL库；编写gtk图形界面程序，则需安装gtk库等。

*** 7.1.2　在哪编写程序

装好了编译工具，懒蜗牛还是有些不知从何下手。他在图形界面找了半天也没找到GCC到底装哪里了。嗯！看来是个命令行程序，于是懒蜗牛又在命令行下运行GCC，结果提示说：no input files，这到底是什么意思呢？连个界面都没有，往哪里写程序啊？

【散装的工具和成套的套件】

看来懒蜗牛同学已经习惯了Windows下的开发工具了，以为GCC跟Turbo
C或者Visual C++一样呢。其实人家Windows下的Visual
C++是一个集成开发环境，那可是个巨无霸型的软件。他拥有编译程序、编辑文本、项目管理、程序调试、帮助文档等各种各样的功能。这符合微软公司总是把软件做得大而全的一贯作风。装了这么一个软件，您就用去吧，啥都有了。

而在我们崇尚简洁的Linux系统中，这些功能分别由不同的软件去实现。例如帮助文档由man来负责；项目管理靠用户写Makefile来实现；文本的编辑则由任何一个用户用着顺手的文本编辑器完成；编译程序，才是GCC的工作。还是那句话：只做一件事，但要做到最好！

所以，写程序这件事其实可以用任何一种文本编辑器完成，只要是能编写文本文件的，都可以写C语言的程序。


【Vim】

上面说的编辑器虽然能够写点小程序，有点小功能，不过毕竟有限。真要做开发，还是有些应付不了。这时候就需要更强大的文本编辑器了，Vim就是一个。

Vim，即Vi Improved，它是Bram Moolenaar开发的、与无比强大且无比难用的Vi编辑器相兼容并且是更加强大易用的文本编辑器。它支持语法变色、正规表达式匹配与替换、插入补全、自定义键等功能，为编写程序提供了极大的方便。图7.5所示是它的Logo。

[[./Images/image00576.jpeg]]
图7.5　Vim的Logo

我们Ubuntu系统中默认带有Vi编辑器，可能很多同学已经听说过它的大名了。不过，这个编辑器实在是很不好用，太没人性了，所以一般人都会让apt去安装一个更人性化一点的Vi------这就是Vim，可以这样安装：
: sudo apt-get install vim-gnome

安装这个包之后，就有了字符界面的Vim和图形界面的gVim可以使用。使用方法基本一样，所不同的就是gVim支持一些鼠标操作。如图7.6所示就是gVim显示C语言代码的效果。

[[./Images/image00578.jpeg]]
图7.6　gVim显示C语言代码

【Emacs】

还有一个跟Vim同样强大的编辑器，就是Emacs了。

Emacs全称为Editor MacroS，直接翻译过来就是“宏编辑器”，图7.7所示是它的Logo。Emacs是一个有着悠久历史的文本编辑器，最初由RichardStallman于1975年在MIT的时候，协同Guy
Steele共同完成，比Vi的诞生要早一点。这种神一样的编辑器使用了Emacs
Lisp这种有着极强扩展性的编程语言，从而实现了包括编程、编译乃至网络浏览等功能的扩展。由于扩展功能的强大，所以很多人开玩笑说Emacs是一个伪装成编辑器的操作系统。

[[./Images/image00579.jpeg]]

图7.7　Emacs的Logo

*提示：*Emacs还有一个分支，是1991年发起的XEmacs项目。XEmacs与Emacs有着良好的兼容性，并且对多国语言的处理能力更加强大。它甚至可以在一份文件中同时处理多种不同的语言文字。

如今，依然有很多人在使用Emacs编辑器处理着他们的各种工作。在我们Ubuntu系统中想用Emacs就直接叫来apt安装：
: sudo apt-get install emacs

安装好之后，就可以直接运行“emacs”命令来启动Emacs。“emacs”命令本身可以判断当前的系统环境，如果有图形界面，会启动图形界面的Emacs，如图7.8所示。如果是在纯字符终端运行“emacs”命令，则启动字符界面的Emacs，如图7.9所示。

[[./Images/image00581.jpeg]]
图7.8　Emacs图形界面

[[./Images/image00582.jpeg]]
图7.9　Emacs字符界面

【最强大的编辑器】

不过有一点要特别注意：千万不要问谁是Linux下最强大的文本编辑器！

一直以来，在Linux这片自由的天空下，两位公认的顶级的文本编辑器------Vim和Emacs，谁也不服对方。两个人都觉得自己才是空前绝后旷古烁今的全能文本编辑器。一旦有谁质疑一下“最强大文本编辑器”的地位，他们两个都会第一时间跳出来，相互指摘对方的缺点，以确立自己在文本编辑器领域的不败地位。

Vim总是指责Emacs说：“那么多的快捷键，记忆起来多麻烦。”

这时候一般Emacs会反驳：“你呢？那么多命令难道容易记？”

“初期需要记住的命令确实多一些，”Vim辩解说，“但是总共就那么几个命令，记住之后就可以应用自如了。通过简单命令的组合可以实现各种复杂的操作。哪像你，每种操作都有快捷键要记忆，而且还分那么多模式。每个模式都有特定的快捷键，搞得人晕头转向。”

“你还好意思说我模式多？你不也分什么输入模式、指令模式还有行末模式么，搞得新手不知如何是好，连退出都不知道怎么退出。你觉得我模式多？那是我灵活，我功能多。你能看邮件么？你能编写网页么？你能看图片么？我都能，并且还远远不止这些。”

Vim会冷冷地说：“是啊......所以你才不是最强大的文本编辑器。因为你压根不是文本编辑器，你是个绑定了文本编辑功能的操作系统！”

“胡说，我是编辑器，怎么成了操作系统了？我不是操作系统！你才是操作系统呢，你们全家都是操作系统！”

......

总之呢，一定不要让这两个人遇到一起，更不能在有他们两个的时候提到谁是最好的之类的话题。否则就是：吵不关机死不休！其实要我说，这两者各有特点而已，没什么争吵的必要。您用哪个顺手就用那个就行了。

【经典的HelloWorld】

介绍了这么多，这会儿懒蜗牛已经完成了他人生中的第一段Linux下的C语言代码。他写的是一段最简单、最经典的C语言代码------HelloWorld。程序全文如下：

#+BEGIN_SRC c
# include <stdio.h>
int main(int argc, char* argv[])
{
  printf("Hello World!\n");
}
#+END_SRC
简洁明了吧。这段程序也没什么实际意义，只是试验一下C语言的编译而已。懒蜗牛同学写好了这个程序之后，把它保存在了/home/lanwoniu/Program_C目录下。这是他刚刚建立的一个目录，把这个源代码存为了hello.c文件。然后，就准备进行编译了。

*提示：*建立目录使用命令：mkdir <路径>/<目录名>。

*** 7.1.3　编译和运行

【编译C语言】

编译很简单，找来编译器GCC就可以了。只见懒蜗牛同学运行：
进入这个目录里，然后：
#+BEGIN_SRC shell :results output
cd $HOME/Documents/Program_C
gcc ./hello.c
ls .
#+END_SRC

#+RESULTS:
: a.out
: hello.c

这样就编译完了，简单吧。运行完了之后，编译出的结果会被命名为一个a.out文件，就放在当前目录下，懒蜗牛执行了ls命令一下，果然看到了这个文件：



这个a.out就是编译出的二进制文件，赶紧执行试试：

[[./Images/image00587.jpeg]]

嗯，果然如预期所料。

咱刚才说了，GCC这个名字已经并不单单指一个编译器了，而是很多种语言的编译器的组合。除了编译C语言的“gcc”命令之外，另外一个最常用的就是用于编译C++程序的“g++”命令了。

【C++语言简介】

C++，这个词在懒蜗牛同学所在的这个国家通常被读做“C加加”，同理，地球对面的程序员通常读做“C plus plus”。它是一种使用非常广泛的计算机编程语言。它完全兼容C语言，在C语言的基础上增加了对对象的支持。

早在20世纪80年代，贝尔实验室的本贾尼·斯特劳斯特卢普（BjarneStroustrup）博士最初发明C++语言的时候，将它命名为“C with Classes”，直译过来也就是“带有类概念的C语言”。C++最初是作为C语言的增强版出现的，但随着它的发展，从增加类开始，不断地增加新特性。什么虚函数（virtual
function）、运算符重载（operator overloading）、多重继承（multiple
inheritance）、模板（template）、异常（exception）、RTTI、命名空间（name
space）逐渐被加入标准。

到1998年，国际标准组织（ISO）颁布了C++程序设计语言的国际标准ISO/IEC
14882-1998。然而由于C++语言被设计得太复杂、太高深、太科幻，以至于到现在为止，都没有一个编译器能够100％地支持这个标准。不过也不用担心，绝大多数编译器的绝大多数行为还是一致的。

【C++的编译】

懒蜗牛很快又试了试“g++”命令的使用。要使用g++，首先得有段C++语言的程序啊，其实“g++”是完全可以编译C程序的，不过为了让程序更C++一些，懒蜗牛同学还是把程序改了改，写出了C++版本的HelloWorld：

[[./Images/image00588.jpeg]]

修改之后，懒蜗牛将程序另存为hello.cpp文件并运行：

[[./Images/image00589.jpeg]]

同样也编译出了a.out文件，运行效果和刚才那段C语言的程序没啥区别。

*提示：*编译输出的文件如果有同名文件在目录下，编译器将直接覆盖原有文件，不做任何提示或询问。

*** 7.1.4　C/C++语言集成开发环境
# 略掉此项
咱们已经说明白了，这个GCC只是个编译器，不是集成开发环境。但是并不是说我们Ubuntu系统里就没有C/C++语言的集成开发环境。毕竟有时候，有的用户，还是用集成开发环境更顺手一些。那我就介绍几个常见的吧。

** 7.2　PHP开发环境的搭建

搭建好了C语言开发环境后，懒蜗牛同学又开始着手试着研究PHP语言了。这主要是因为他觉得C语言还是有点难度，好像PHP更容易入门些。于是他就开始了搭建PHP开发环境的工作。

*** 7.2.1　PHP是个神马

PHP（Hypertext Preprocessor）是一种脚本语言，主要用于处理动态网页。不过它也包含了命令行运行接口，甚至还能产生拥有图形用户界面（GUI）的程序。PHP最早由拉斯姆斯·勒多夫（Rasmus
Lerdorf）在1995年发明，就是图7.14中所示的这位仁兄。要说起PHP的作用和意义，那就得从很久以前说起了......

[[./Images/image00596.jpeg]]

图7.14　拉斯姆斯·勒多夫

【静态的HTML】

话说很久很久以前，互联网才刚刚兴起。那时候网页上使用的是HTML语言，也就是超文本标记语言------HyperText
Markup Language来实现排版。似乎是带“超”字的东西都比较强大而流行，比如超人、超市、超女之类的，于是网页这种形式的媒介很快流行起来（这都挨得着么......）。用户的浏览器下载下来用HTML语言写的网页，然后按照HTML语言的规则解释为一张调整好各种版式、字体、图片等内容的网页，如图7.15所示。

[[./Images/image00597.jpeg]]

图7.15　静态网页

【在客户端执行的脚本】

不过过了几年，人们就不满足于仅仅靠HTML提供的这种静态的网页了。于是各种网页脚本语言开始盛行，比如JavaScript。这种脚本嵌入在HTML的网页源码中，用户的浏览器下载下网页的源码之后，除了按照HTML排版出网页以外，还要运行网页上的JavaScript语言写的脚本程序。有了这样的脚本语言，就可以实现很多有意思的效果，比如图片的移动（比如某些网页上飘来飘去的广告），背景的切换，甚至实现一个网页上的小游戏，都没有问题。于是，网页开始越来越有意思了。图7.16所示就是一个有一定互动性的动态网页的例子。

[[./Images/image00598.jpeg]]

图7.16　互动网页

【在服务器端执行的脚本】

不过这种脚本语言也有它的问题。随着这种脚本运用得越来越广泛，写得越来越复杂，执行的效率就难以保障了。用户的电脑多种多样，有的是奔腾166
MHz的CPU，16 MB的内存；有的是8核CPU，8
GB的内存。这两台电脑如果运行同一个网页行的脚本，速度肯定不一样。并且由于不同的浏览器对脚本的解释也会有些细微的差别，因此一个脚本要想在各种电脑、各种浏览器上都能有相同的效果，需要做大量的兼容性测试工作。

这时候，PHP语言吸引了人们的目光。PHP也是一种脚本语言，但它是运行在服务器端的。它同样可以提供一些互动性的或者动态的网页，但这种动态和互动性是依赖服务器的运算能力来实现的，不需要用户的浏览器和电脑做过多的工作。

这样做的好处就是减少了客户端浏览器和计算机硬件的不同带来的差异性，减轻了客户端浏览器的工作压力，让网页的效果更有保证。

*** 7.2.2　解释型语言

PHP是一种解释型的语言，跟刚才咱们说的编译型的C语言不一样。那么解释型语言又是怎么回事呢？

解释型语言就是由一个统一的解释器根据脚本程序进行各种操作，实现各种各样的功能。假设还是你懒得翻书这件事。如果用编译型语言，就相当于设计出一张“自动翻书机”的图纸，然后照着图纸制造出这么个机器，之后你就可以懒到看书不用翻了。

如果用解释型语言呢？那你需要先有一台“全功能懒人助手机器人”，然后你写一段翻书的程序输入到里面，程序里写明了该怎么翻、如何翻、全是字的页隔多长时间翻、有插图的隔多长时间翻等。然后这个全能机器人理解了你写的程序后，就可以帮你做翻书的动作了。

这时候，你写的那个清单，就相当于解释型语言的程序清单。而全能机器人能够解释你的程序，并做出相应的动作，于是它就是你这种“翻书语言”的解释器了。

从我们操作系统的角度看，编译型语言是通过编译器创造出新的程序，然后让这个新的程序去完成你需要的任务；而解释型语言是有一个通用的，干什么都行的解释器程序（比如全能机器人），通过写程序告诉这个程序该去干什么，然后由解释器程序去具体实现各种功能。

*提示：*我们熟悉的bash其实也是一种解释器，Shell脚本就是用bash能够看懂的语言写的一段程序。

*** 7.2.3　安装Apache和PHP

懒蜗牛同学准备安装Apache了。

【安装必要的软件包】

有人问，这个Apache是什么？不是在说PHP么？你是不是印错了？告诉您，没错。这个Apache是我们Linux下的一个Web服务器软件，对外提供Web服务。再简单点说吧，有了Apache，就可以把你的电脑做成一个网站了。Apache的Logo是一片彩色的羽毛，您可能曾经看到过，如图7.17所示：

[[./Images/image00599.jpeg]]
图7.17　Apache的Logo

因为PHP主要是用在网页上的脚本语言，而且还是在服务器端执行的，所以当然先得有个Web服务器才好使用PHP脚本。

*提示：*一些轻量级的Web服务器软件，例如Lighttpd、thttpd等，也可以支持PHP脚本。

安装Apache还是找超级牛力，PHP也找超级牛力装，为了省事，可以写在一条命令里，类似这样：
: sudo apt-get install apache2 php-mysql

【验证Apache正常】

安装的过程没什么悬念，安装后你就可以用Firefox访问
http://127.0.0.1/
这个地址来看看效果了，如果正常，应该会看到如图7.18所示的页面。

[[./Images/image00601.jpeg]]

图7.18　Apache默认页面

*提示：*根据TCP/IP协议，127.0.0.1为代表本机的特殊地址。

那么这个简陋的页面是从哪里来的呢？
装上了Apache之后，你的电脑就相当于一个网站的服务器了。而这个页面，就相当于网站的首页。这个页面存储在/var/www/目录下，里面有个index.html文件，里面的内容很简单，大约就是这样：

[[./Images/image00602.jpeg]]

用狐狸妹妹访问127.0.0.1的时候，狐狸妹妹就连接到本机的80端口，然后会发现Apache在那里笑盈盈地等着，并把这个简单的index.html文件交给狐狸妹妹，狐狸再根据HTML语言的规则把文件显示出来，就是您刚才看到的那个页面。

如果能够显示这个页面，Apache算是正常工作了，但我们还没有看到PHP的身影呢。

【验证PHP正常】

要验证PHP是否正常工作，需要写一个PHP的页面。还在刚才那个/var/www/目录里，咱们再写一个index.php。当然，这个目录不是随便哪个人都能写入的，需要sudo：

[[./Images/image00603.jpeg]]

这样，gedit会打开一个空文件，然后我们往里面写入如下内容。暂时照着写，不要问为什么。

[[./Images/image00604.jpeg]]

写完之后保存好，再访问http://127.0.0.1/index.php
（如果访问http://127.0.0.1/，还会获取到index.html）
然后，就是见证奇迹的时刻，如图7.19所示。

[[./Images/image00605.jpeg]]

图7.19　PHP信息页面

我们写下的短短几行的代码竟然显示出这么复杂的一个页面。这个页面里介绍了当前正在运行的PHP的一些信息，比如版本、各种相关的配置等。看到这个页面，就说明PHP已经正常地运行起来了。

*** 7.2.4　又是HelloWorld

好了，现在开发PHP的环境装好了，懒蜗牛同学要开始学习怎么写PHP程序了。

【浏览器中的PHP页面】

刚才我们看到了，PHP的程序是嵌入在HTML语言之间的，用标记“<?php”作为开始，“?>”作为结束。这两个标记之间的内容，就是PHP的语句。懒蜗牛同学又写了个经典的HelloWorld程序，存为test.php文件，放在了/var/www/目录下。程序全文如下：

[[./Images/image00606.jpeg]]

*提示：*曾经PHP语言的开始标记也可简写为“<?”，但为了防止和其他的标记符号冲突，PHP官方现在推荐使用标准的“<?php”。

这样，当懒蜗牛同学用狐狸妹妹访问http://127.0.0.1/test.php
的时候，就是下面这样一个过程。

（1）首先，Apache接到狐狸的请求，知道她想要查看test.php这个文件，于是就把文件拿过来。但是根据扩展名发现这是一个.php文件，于是就叫来PHP处理。

（2）然后，PHP就查找这个文件中所有“<?php”和“?>”之间的内容，并且按照PHP语言去解释它们，执行相应的操作，用操作输出的结果替换掉“<?php”和“?>”之间的内容，再交回Apache手里。这时候的代码里就没有PHP的内容了，比如懒蜗牛同学写的这个简单的test.php页面，经过PHP翻译之后，大约就是下面的样子：

[[./Images/image00607.jpeg]]

（3）之后，Apache才将PHP翻译过的这个文件交给狐狸妹妹，让她去根据HTML语言的规范去显示页面。狐狸显示出来的test.php大约就是图7.20所示的这个样子了。所以说狐狸根本看不到什么PHP语句，这就是所谓的“运行在服务器端”的脚本语言。

[[./Images/image00608.jpeg]]

图7.20　test.php效果

【命令行中的PHP脚本】

另外，PHP脚本也不一定非要用在网页上，如果你对PHP语言非常熟悉，想用它写个脚本实现一些简单的功能，比如批量处理文件、自动格式化硬盘之类的，也是没问题的。不过这需要一个命令行下的PHP解释器，需要安装“php5cli”这个软件包，运行以下命令即可，都是老熟人了，我就不讲解这个命令是什么意思了：

[[./Images/image00609.jpeg]]

装好之后，你就可以写PHP脚本了，比如下面这个简单的例子：

[[./Images/image00610.jpeg]]

这个文件第一行，咱们之前说过，说明了这个脚本的解释器是/usr/bin/php。下面就是PHP的语句了，当然，虽然不是网页，但PHP语句也一定要写在<?php和?>之间。把这个文件写好了之后，存储为cpu.sh并赋予执行权限之后，即可执行这个脚本看效果了，其实就是用来查看CPU信息的一个小脚本。

*提示：*使用chmod +x
cpu.sh命令来赋予可执行权限。
** 7.3　Java开发环境的搭建

除了C语言外，应用最广泛的语言大概就是Java了，尤其是在开发手机应用方面，更是Java的天下。因此，懒蜗牛同学决定，还得好好学一下Java。

*** 7.3.1　半编译型语言

Java也是一种电脑编程语言，拥有跨平台、面向对象、泛型编程等特性。它最初被命名为Oak（橡树），当时的目标是用于电视机、电话、闹钟、烤面包机等家用电器的控制和通信。可是由于这些智能化家电的市场需求没有预期的高，于是Oak被改造为应用在互联网上的编程语言。1995年5月，它被正式命名为Java，并伴随着互联网的迅猛发展而发展，逐渐成为重要的网络编程语言。它的Logo大概您不会陌生，就是图7.21所示的这杯咖啡。

[[./Images/image00611.jpeg]]

图7.21　Java的Logo

前面说了，这个编程语言有编译型的，有解释型的。那好，提问：Java是哪种类型的语言呢？

　A．编译型
　B．解释型
　C．以上皆错
　D．人妖型

正确答案：C、D（我说是单选了吗？）。

其实，Java既不是编译型，也不是解释型。它有它的中性美，是多少有点半男不女、半上不下、半人半妖的这么一种人妖型语言。好吧，我承认这个名字不那么好听，那么我们就管它叫做半编译型语言吧。为什么这么叫呢？

【既需要编译器，又需要解释器】

首先，跟编译型语言一样，要想运行Java的源程序，必须要经过编译的步骤。但是Java程序编译出来之后并不能像C/C++语言一样直接在机器上运行。也就是说，Java编译器编译出来的并不是一个符合当前系统的二进制格式的程序，而是一种特殊结构的二进制程序。

那么这种特殊的程序怎么运行呢？要想运行这个程序，就和解释型语言一样，需要一个解释器。Java的解释器就是Java虚拟机。一般如果要运行一个Java写的软件，就必须装一个叫做JRE的东西。他负责给Java程序创造出一个可以自由运行的空间，在那里面，这个编译好的Java程序才能运行。

就好像，我们宽敞的内存是一片大草原，GCC编译出来的程序就是各种哺乳动物，什么牛、羊、猎狗之类的。而Java编译出来的程序就是一堆鲤鱼、黄鳝、泥鳅之类的东西。那么JRE的工作，就是挖一个水塘，或者做一个鱼缸。
# 够形象的.
【Java的特点】

那为什么Java要整得这么繁琐呢？又需要编译器，又需要解释器，有什么好处？好处很大，最大的好处就是跨平台。

作为编译型语言，编译出来的程序跟目标平台是紧密相关的。平台包括硬件和操作系统。也就是说，同样一套程序的源代码，如果要在不同的操作系统或者不同的硬件平台上运行，那么就需要用不同的编译器，针对每一种系统和硬件分别进行编译，才能够运行。

而Java就可以解决这种困境。它可以只编译一次，就能把编译出的二进制程序放到不同的平台上运行。当然，前提是那些平台上都安装了Java的解释器。各个平台的差异性由Java的解释器统一处理掉了，编写Java程序的人不需要考虑程序是运行在哪个系统，哪种CPU中，只要程序写出来，编译完了，就可以放到任何地方运行。Java的理想就是：Write once，run anywhere。

*提示：*实质上，由于各个系统的差异性，Java编译出的程序还是需要针对特定平台进行一定的调试和修改。所以有的程序员戏称Java是“Write once,debug anywhere”。

当然，解释型语言照样可以实现跨平台，只要不同的平台上都有相应的解释器就可以。比如bash其实就可以算是一种解释型语言，同样一个脚本，不管你是在Linux还是BSD系统，或者Windows的cygwin模拟环境下，都可以实现相同的功能。但是与之相比，由于经过了编译，Java的二进制程序更接近汇编指令，因此翻译起来效率比纯解释型语言高很多。

*** 7.3.2　JDK和JRE

作为一种编译型语言，要编译程序，就需要编译器。
作为一种解释型语言，要运行程序，就需要解释器。
而作为一种人妖型语言的Java，既需要编译器，又需要解释器。所以，我们就来说说怎么装这俩东西。

【安装开源的JDK和JRE】

如果你想要运行一个Java的程序，比如咱们之前介绍过的BT下载软件毒蛙，那么你的系统里面就必须有解释器------JRE。JRE就是JavaRunTime的缩写，只要你想运行Java程序，无论在哪个系统上，都得安装它。而如果你想开发Java程序，那就不止需要JRE了，还需要JDK，也就是Java Development Kit，Java开发工具。

这两种东西在我们的软件源里有不止一种。您可以在新立得里面搜索一下JRE，会有不少结果。其中有一个openjdk系列的软件包，包括了编译器JDK和解释器JRE。看名字就能明白，这是一套Java的开源实现，如果您只是想运行些简单的Java程序，基本上装这个包也就可以了。不过既然懒蜗牛同学是想做Java的开发，那还是用更权威的比较好，那就是sun-java6。

【安装权威的JDK和JRE】

sun-java6这一套开发套件默认并不在源中，需要稍微操作一下。别急，一点儿也不难。

（1）首先用任何顺手的编辑器打开/etc/apt/sources.list文件，例如用gedit，就这样：

[[./Images/image00612.jpeg]]

（2）打开sources.list文件之后，在文件的最后加上这样一行：

[[./Images/image00613.jpeg]]

（3）记得我们说过，更改sources.list文件之后一定要更新，所以：

[[./Images/image00614.jpeg]]

好了，这样就可以直接用超级牛力来安装Java相关的东西了。比如安装JRE只要运行：

[[./Images/image00615.jpeg]]

就安装好了。或者用新立得安装sun-java6-jre这个软件包，也一样。如果需要做Java开发，就安装JDK。

[[./Images/image00616.jpeg]]



** 7.4　Vim编辑器的使用

前面咱们曾经介绍过几种常用的文本编辑器。其中使用最广泛，功能最强大的，就要数Vim和Emacs了（可别问哪个更强大啊，省得他俩又吵起来）。于是，懒蜗牛同学打算学习一下Vim的使用，为以后写程序及写脚本做好充分的准备（懒蜗牛学习Vim的事别让Emacs知道啊，低调低调）。
两种模式:　命令模式和输入模式

** 7.４　本章小结

这些日子，咱们这位懒蜗牛同学可是没少忙活。又是C，又是C++，又是PHP，又是Java的，配置了不少语言的开发环境。并且为了更好地编程，懒蜗牛还学习了Vim的使用。可是也没见他写出什么有用的东西来。当然，也许生活，就是一个HelloWorld，接着另一个HelloWorld吧。
# 这一章太无聊了．
